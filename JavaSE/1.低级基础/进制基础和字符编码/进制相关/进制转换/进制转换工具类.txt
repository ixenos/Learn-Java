public class Utilities {
	public static byte[] int2Bytes(int num) {
		byte[] byteNum = new byte[4];
		for (int ix = 0; ix < 4; ++ix) {
			int offset = 32 - (ix + 1) * 8;//从高八位开始取
			byteNum[ix] = (byte) ((num >> offset) & 0xff);//取右移后的低八位
		}
		return byteNum;//用byte数组分别藏着4个8位
	}

	public static int bytes2Int(byte[] byteNum) {
		int num = 0;
		for (int ix = 0; ix < 4; ++ix) {
			num <<= 8;//取一次就左移八位，把高位推前
			num |= (byteNum[ix] & 0xff);//或等用来吸收1
		}
		return num;
	}

	public static byte int2OneByte(int num) {
		return (byte) (num & 0x000000ff); //只取低八位
	}

	public static int oneByte2Int(byte byteNum) { 
    return byteNum > 0 ? byteNum : (128 + (128 + byteNum));//大于0自动转换，小于0补充信仰使其为小于0的int，因为直接转换缺少符号位 
}  
  
public static byte[] long2Bytes(long num) {  //byte 1B short 2B int 4B long 8B float 4B double 8B char 2B boolean 
    byte[] byteNum = new byte[8];  
    for (int ix = 0; ix < 8; ++ix) {  
        int offset = 64 - (ix + 1) * 8;  
        byteNum[ix] = (byte) ((num >> offset) & 0xff);  
    }  
    return byteNum;  
}  
  
public static long bytes2Long(byte[] byteNum) {  
    long num = 0;  
    for (int ix = 0; ix < 8; ++ix) {  
        num <<= 8;  
        num |= (byteNum[ix] & 0xff);  
    }  
    return num;  
}  