
面向过程的静态全局变量

在全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。我们先举一个静态全局变量的例子，如下：
 
//Example1
#include<iostream>
usingnamespace std;
void fn();  //声明函数
static int n;  //声明静态全局变量
void main()
{
    n=20;  //为n赋初值
    printf("%d",n);//输出n的值
    fn();  //调用fn函数
}
void fn()
{
    n++;  //n的值自加一（n=n+1）
    printf("%d",n);  //输出n的值
}
 


1.静态全局变量有以下特点：

该变量在全局数据区分配内存；



未经初始化的静态全局变量会被程序自动初始化为0（在函数体内声明的自动变量的值是随机的，除非它被显式初始化，而在函数体外被声明的自动变量也会被初始化为0）；



静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的；


2.静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量。对于一个完整的程序，在内存中的分布情况如下图：

代码区 //low address全局数据区堆区栈区 //high address

一般程序把新产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。全局数据区的数据并不会因为函数的退出而释放空间。


3.定义全局变量就可以实现变量在文件中的共享，但定义静态全局变量还有以下好处：

静态全局变量不能被其它文件所用；

其它文件中可以定义相同名字的变量，不会发生冲突；


4.全局变量和全局静态变量的区别

1）全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。

2）全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。





