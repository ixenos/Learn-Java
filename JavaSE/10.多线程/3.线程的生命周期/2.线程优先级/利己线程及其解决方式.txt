利己线程

在线程中可以通过调用sleep方法放弃当前线程对处理器的使用，但是有例外，如下：
	
	public void run(){
		for(int i =0; i<5000000; i++){
			if(i%50000 == 0){
				System.out.print(getName());	
			}
		}
	}

这个例子中for循环是一个紧密循环tight loop，一旦运行系统选择了有这种循环体的线程执行，该线程不会主动放弃对cpu的使用权
除非for循环自然终止或该线程有一个更高优先级的线程抢占，这样的线程称为利己线程。


分时方式

为了解决利己线程长时间占用cpu的问题，有些系统通过分时方式来限制利己线程的执行
处理器的分配按时间片来划分 相同优先级的多个线程，分时技术会交替地分配cpu时间片



抢占式策略：（底层系统采用的线程调度的方式之一，还有协作式）
	    1.同优先级时，分时，时间片用完后剥夺cpu资源，给其他线程机会
	    2.另外，在选择下一个线程时，会考虑优先级