##############################################################################
# 
#	after 2017-7-19
#
#
##############################################################################

1.merge remote时退出 ":wq" w是保存，q是退出

2.git checkout -b xx 就是 git branch xx 和 git checkout xx， 即创建分支xx并切换到xx

3.git branch 查看分支

4.git branch xx 创建分支xx

5.git log --pretty=oneline 每行commit记录以一行展示

5.git reflog --pretty=oneline 每行操作记录以一行展示

6.git bash快捷键：
（1）ctrl+insert 复制
（2）shift+insert 粘贴/复制并粘贴
（3）alt+F11 全屏


##############################################################################
# 
#	before 2017-6-1
#
#
##############################################################################

1.git的基本配置命令

	初始化用户命令
	git config --global user.name 用户名
	git config --global user.email xxx@xxx.com
	
	git命令的三个级别
	git config --system	当前系统
	git config --global	当前用户	三个级别的优先级：local>global>system
	git config --local	当前仓库
	
	git文档帮助命令
	git config --help
	git help config
	man git-config
	
2.git基本的工作流程

git使用40个16进制字符的SHA-1 Hash来唯一标识一个对象

git对象类型
1.blob		代表文本、二进制等文件
2.tree		代表目录
3.commit	代表历史提交
4.tag		指向一个固定的历史提交

git仓库的三个区域
	working directory	工作区
	staging area		暂存区
	history repository	历史记录区
	
git仓库的创建
	git init 仓库名
	
git工作流程
						git add					  git commit
	working directory ------------> staging area ------------> history repository
	git管理的是修改不是文件
	只有git add的修改才能被commit到版本库
	
git仓库操作命令
	1.git add 文件1 文件2					添加文件到暂存区
	2.git commit 文件1 文件2 -m "版本备注"	提交文件到历史记录区
	3.git status							查看暂存区改动
	4.git rm 文件1 文件2					删除暂存区文件
	5.git mv 文件1 文件2					移动暂存区文件
	6.gitignore 文件1 文件2					指定不被添加的文件
	7.git diff 文件名						查看add文件后的修改内容
	10.git log								查看提交日志 加--pretty=oneline参数查看简洁版日志
	11.git reflog							查看命令日志
	11.git reset --hard HEAD^				回退上一个版本
	12.git reset --hard commit id			回退到指定commit id版本
	13.git diff HEAD -- 文件名				查看工作区和版本库中最新版本的区别
	14.git checkout -- file					丢弃工作区的修改，命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
	15.git reset HEAD file					撤销提交到暂存区的修改
	16.git rm file							文件从版本库中删除
	
git远程仓库
	1.git remote add origin [git@server-name]:[path]/[repo-name].git	本地仓库与远程仓库关联
	2.git push -u origin master		提交分支到远程仓库，第一次提交加-u参数
	3.git clone git@[github.com]:[michaelliao]/[gitskills].git			ssh协议克隆一个远程仓库
	4.git clone [https://github.com/michaelliao/gitskills.git]			https协议克隆一个远程仓库
	
git分支管理
	1.git branch				查看所有分支
	2.git branch 分支名			创建一个分支
	3.git checkout -b 分支名	创建并切换分支
	4.git checkout 分支名		切换分支
	5.git merge	分支名			合并指定分支到当前分支
	6.git branch -d 分支名		删除指定分支
	7.git log --graph			查看分支合并图
	
	Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
	
	分支管理策略
	1.通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	命令：
	git merge --no-ff -m "merge with no-ff" dev		--no-ff参数表示禁用Fast forward模式
	
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。